"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var Observable_1 = require("rxjs/Observable");
var ng2_alfresco_core_1 = require("ng2-alfresco-core");
var ng2_alfresco_documentlist_1 = require("ng2-alfresco-documentlist");
var AOSEditOnlineService = AOSEditOnlineService_1 = (function () {
    function AOSEditOnlineService(alfrescoApiService, alfrescoAuthenticationService, alfrescoSettingsService, notificationService, documentActionService, translationService) {
        this.alfrescoApiService = alfrescoApiService;
        this.alfrescoAuthenticationService = alfrescoAuthenticationService;
        this.alfrescoSettingsService = alfrescoSettingsService;
        this.notificationService = notificationService;
        this.documentActionService = documentActionService;
        this.translationService = translationService;
    }
    AOSEditOnlineService.prototype.onActionEditOnlineAos = function (nodeId) {
        var _this = this;
        var opts = {
            include: ['isLocked', 'path']
        };
        return Observable_1.Observable.fromPromise(this.alfrescoApiService.getInstance().core.nodesApi.getNode(nodeId, opts)
            .then(function (data) {
            if (data) {
                var node = data.entry;
                if (node.isFile) {
                    if (node.isLocked) {
                        var checkedOut = node.aspectNames.contains('cm:checkedOut');
                        var lockOwner = node.properties['cm:lockOwner'];
                        var differentLockOwner = lockOwner.id !== _this.alfrescoAuthenticationService.getEcmUsername();
                        if (checkedOut && differentLockOwner) {
                            _this.onAlreadyLockedNotification(node.id, lockOwner);
                            return false;
                        }
                        else {
                            _this.triggerEditOnlineAos(node);
                            return true;
                        }
                    }
                    else {
                        _this.triggerEditOnlineAos(node);
                        return true;
                    }
                }
            }
        }));
    };
    AOSEditOnlineService.prototype.getUserAgent = function () {
        return navigator.userAgent.toLowerCase();
    };
    AOSEditOnlineService.prototype.isWindows = function () {
        return this.getUserAgent().indexOf('win') !== -1 ? true : false;
    };
    AOSEditOnlineService.prototype.isMacOs = function () {
        return this.getUserAgent().indexOf('mac') !== -1 ? true : false;
    };
    AOSEditOnlineService.prototype.onAlreadyLockedNotification = function (nodeId, lockOwner) {
        this.notificationService.openSnackMessage("Document {nodeId} locked by {lockOwner}", 3000);
    };
    AOSEditOnlineService.prototype.getProtocolForFileExtension = function (fileExtension) {
        return AOSEditOnlineService_1.MS_PROTOCOL_NAMES[fileExtension];
    };
    AOSEditOnlineService.prototype.triggerEditOnlineAos = function (node) {
        var url = this.onlineEditUrlAos(node);
        var fileExtension = node.name.split('.').pop() !== null ? node.name.split('.').pop().toLowerCase() : '';
        var protocolHandler = this.getProtocolForFileExtension(fileExtension);
        if (protocolHandler === undefined) {
            var message = this.translationService.get('AOS.ERROR.NO_PROTOCOL_HANDLER');
            this.notificationService.openSnackMessage(message.value, 3000);
            return;
        }
        if (!this.isWindows() && !this.isMacOs()) {
            var message = this.translationService.get('AOS.ERROR.UNSUPPORTED_CLIENT_OS');
            this.notificationService.openSnackMessage(message.value, 3000);
        }
        else {
            this.aos_tryToLaunchOfficeByMsProtocolHandler(protocolHandler, url);
        }
    };
    AOSEditOnlineService.prototype.onlineEditUrlAos = function (node) {
        var pathElements = node.path.elements.slice(1, node.path.elements.length);
        var path = '/';
        for (var _i = 0, pathElements_1 = pathElements; _i < pathElements_1.length; _i++) {
            var element = pathElements_1[_i];
            path = path + element.name + '/';
        }
        var url = this.alfrescoSettingsService.ecmHost + '/alfresco/aos' + path + '/' + node.name;
        if (encodeURI(url).length > 256) {
            url = this.alfrescoSettingsService.ecmHost + '/alfresco/aos/' + '_aos_nodeid' + '/' + node.id + '/' + node.name;
        }
        return url;
    };
    AOSEditOnlineService.prototype.aos_tryToLaunchOfficeByMsProtocolHandler = function (protocolHandler, url) {
        var protocolUrl = protocolHandler + ':ofe%7Cu%7C' + url;
        var protocolHandlerPresent = false;
        var input = document.createElement('input');
        var inputTop = document.body.scrollTop + 10;
        input.setAttribute('style', 'z-index: 1000; background-color: rgba(0, 0, 0, 0); border: none; outline: none; position: absolute; left: 10px; top: ' + inputTop + 'px;');
        document.getElementsByTagName('body')[0].appendChild(input);
        input.focus();
        input.onblur = function () {
            protocolHandlerPresent = true;
        };
        location.href = protocolUrl;
        var that = this;
        setTimeout(function () {
            input.onblur = null;
            input.remove();
            if (!protocolHandlerPresent) {
                var message = that.translationService.get('AOS.ERROR.UNSUPPORTED_CLIENT_VERSION');
                that.notificationService.openSnackMessage(message.value, 3000);
            }
        }, 500);
    };
    return AOSEditOnlineService;
}());
AOSEditOnlineService.AOS_EDITONLINE_ACTION_HANDLER_KEY = 'aos-editonline';
AOSEditOnlineService.MS_PROTOCOL_NAMES = {
    'doc': 'ms-word',
    'docx': 'ms-word',
    'docm': 'ms-word',
    'dot': 'ms-word',
    'dotx': 'ms-word',
    'dotm': 'ms-word',
    'xls': 'ms-excel',
    'xlsx': 'ms-excel',
    'xlsb': 'ms-excel',
    'xlsm': 'ms-excel',
    'xlt': 'ms-excel',
    'xltx': 'ms-excel',
    'xltm': 'ms-excel',
    'ppt': 'ms-powerpoint',
    'pptx': 'ms-powerpoint',
    'pot': 'ms-powerpoint',
    'potx': 'ms-powerpoint',
    'potm': 'ms-powerpoint',
    'pptm': 'ms-powerpoint',
    'pps': 'ms-powerpoint',
    'ppsx': 'ms-powerpoint',
    'ppam': 'ms-powerpoint',
    'ppsm': 'ms-powerpoint',
    'sldx': 'ms-powerpoint',
    'sldm': 'ms-powerpoint'
};
AOSEditOnlineService = AOSEditOnlineService_1 = __decorate([
    core_1.Injectable(),
    __metadata("design:paramtypes", [typeof (_a = typeof ng2_alfresco_core_1.AlfrescoApiService !== "undefined" && ng2_alfresco_core_1.AlfrescoApiService) === "function" && _a || Object, typeof (_b = typeof ng2_alfresco_core_1.AlfrescoAuthenticationService !== "undefined" && ng2_alfresco_core_1.AlfrescoAuthenticationService) === "function" && _b || Object, typeof (_c = typeof ng2_alfresco_core_1.AlfrescoSettingsService !== "undefined" && ng2_alfresco_core_1.AlfrescoSettingsService) === "function" && _c || Object, typeof (_d = typeof ng2_alfresco_core_1.NotificationService !== "undefined" && ng2_alfresco_core_1.NotificationService) === "function" && _d || Object, typeof (_e = typeof ng2_alfresco_documentlist_1.DocumentActionsService !== "undefined" && ng2_alfresco_documentlist_1.DocumentActionsService) === "function" && _e || Object, typeof (_f = typeof ng2_alfresco_core_1.AlfrescoTranslationService !== "undefined" && ng2_alfresco_core_1.AlfrescoTranslationService) === "function" && _f || Object])
], AOSEditOnlineService);
exports.AOSEditOnlineService = AOSEditOnlineService;
var AOSEditOnlineService_1, _a, _b, _c, _d, _e, _f;
